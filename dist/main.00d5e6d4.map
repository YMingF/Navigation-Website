{"version":3,"sources":["main.js"],"names":["$siteList","$","$lastLi","find","x","localStorage","getItem","xObject","JSON","parse","hashMap","logo","url","simplifyUrl","replace","render","remove","forEach","node","index","$li","insertBefore","on","window","open","e","console","log","stopPropagation","splice","string","stringify","setItem","prompt","indexOf","push","logoType","document","key","i","length","toLowerCase"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,YAAUC,EAAE,WAAF,CAAhB;AACA,IAAMC,UAAQF,UAAUG,IAAV,CAAe,SAAf,CAAd,EAAuC;AACvC,IAAMC,IAAEC,aAAaC,OAAb,CAAqB,GAArB,CAAR;AACA,IAAMC,UAAQC,KAAKC,KAAL,CAAWL,CAAX,CAAd;AACA;AACA,IAAMM,UAAQH,WAAW,CAAG;AACxB,EAACI,MAAK,GAAN,EAAWC,KAAI,sBAAf,EADqB,EAErB,EAACD,MAAM,GAAP,EAAWC,KAAI,2BAAf,EAFqB,CAAzB;;AAKA,IAAMC,cAAY,SAAZA,WAAY,CAACD,GAAD,EAAO;AACrB;AACA,WAAOA,IAAIE,OAAJ,CAAY,UAAZ,EAAuB,EAAvB,EACFA,OADE,CACM,SADN,EACgB,EADhB,EAEFA,OAFE,CAEM,MAFN,EAEa,EAFb,EAGFA,OAHE,CAGM,MAHN,EAGa,EAHb,CAAP,CAFqB,CAKE;AAC1B,CAND;AAOA,IAAMC,SAAO,SAAPA,MAAO,GAAI;AACbf,cAAUG,IAAV,CAAe,eAAf,EAAgCa,MAAhC,GADa,CAC2B;AACxCN,YAAQO,OAAR,CAAgB,UAACC,IAAD,EAAMC,KAAN,EAAc;AAAC;AAC3B,YAAMC,MAAInB,iFAGciB,KAAKP,IAHnB,8CAIcE,YAAYK,KAAKN,GAAjB,CAJd,kNAYPS,YAZO,CAYMnB,OAZN,CAAV,CAD0B,CAaF;AACxBkB,YAAIE,EAAJ,CAAO,OAAP,EAAe,YAAI;AAAE;AACjBC,mBAAOC,IAAP,CAAYN,KAAKN,GAAjB;AACH,SAFD;AAGAQ,YAAIE,EAAJ,CAAO,OAAP,EAAe,QAAf,EAAwB,UAACG,CAAD,EAAK;AAAC;AAC1BC,oBAAQC,GAAR,CAAY,MAAZ;AACAF,cAAEG,eAAF,GAFyB,CAEN;AACnBlB,oBAAQmB,MAAR,CAAeV,KAAf,EAAqB,CAArB,EAHyB,CAGF;AACvBJ,qBAJyB,CAIjB;AACX,SALD;AAMH,KAvBD;AAwBA;AACA,QAAMe,SAAOtB,KAAKuB,SAAL,CAAerB,OAAf,CAAb,CA3Ba,CA2BuB;AACpCL,iBAAa2B,OAAb,CAAqB,GAArB,EAAyBF,MAAzB,EA5Ba,CA4BmB;AACnC,CA7BD;AA8BAf;AACA;AACAd,EAAE,YAAF,EACKqB,EADL,CACQ,OADR,EACgB,YAAI;AACZ,QAAIV,MAAIW,OAAOU,MAAP,CAAc,UAAd,CAAR,CADY,CACqB;AACjC,QAAGrB,IAAIsB,OAAJ,CAAY,MAAZ,MAAsB,CAAzB,EAA2B;AAAC;AACzBtB,cAAI,aAAWA,GAAf;AACF;AACDc,YAAQC,GAAR,CAAYf,GAAZ;AACAF,YAAQyB,IAAR,CAAa;AACTxB,cAAKE,YAAYD,GAAZ,EAAiB,CAAjB,CADI;AAETwB,kBAAS,MAFA,EAEOxB,KAAIA;AAFX,KAAb;AAIAG;AACP,CAZD;;AAeAd,EAAEoC,QAAF,EAAYf,EAAZ,CAAe,UAAf,EAA0B,UAACG,CAAD,EAAK;AAAA,QACpBa,GADoB,GACfb,CADe,CACpBa,GADoB,EACd;;AACb,SAAI,IAAIC,IAAE,CAAV,EAAYA,IAAE7B,QAAQ8B,MAAtB,EAA6BD,GAA7B,EAAiC;AAC7B,YAAG7B,QAAQ6B,CAAR,EAAW5B,IAAX,CAAgB8B,WAAhB,OAAgCH,GAAnC,EAAuC;AAAE;AACrCf,mBAAOC,IAAP,CAAYd,QAAQ6B,CAAR,EAAW3B,GAAvB;AACH;AACJ;AACJ,CAPD","file":"main.00d5e6d4.map","sourceRoot":"..\\src","sourcesContent":["const $siteList=$('.siteList')\r\nconst $lastLi=$siteList.find('li.last')//到li里找类为last的元素\r\nconst x=localStorage.getItem('x')\r\nconst xObject=JSON.parse(x)\r\n//用数组\r\nconst hashMap=xObject || [  //一开始xObject可能为空,所以要用||，即如果xObject为空,那就去用后面的数据赋值\r\n    {logo:'A' ,url:'https://www.acfun.cn' },\r\n    {logo: 'B',url:'https://www.bilibili.com/' },\r\n]\r\n\r\nconst simplifyUrl=(url)=>{\r\n    //replace会有一个返回值,并不改变原来的元素url\r\n    return url.replace('https://','')\r\n        .replace('http://','')\r\n        .replace('www.','')\r\n        .replace(/\\/.*/,'')//此正则用于删除以/开头的内容\r\n}\r\nconst render=()=>{\r\n    $siteList.find('li:not(.last)').remove()//将之前界面显示的网址都删除,方便后面重新显示,有点像Python的界面刷新的功能\r\n    hashMap.forEach((node,index)=>{//node为当前元素,index为元素下标\r\n        const $li=$(`\r\n        <li>\r\n        <div class=\"site\">\r\n            <div class=\"logo\">${node.logo}</div>\r\n            <div class=\"link\">${simplifyUrl(node.url)}</div>\r\n            <div class=\"close\">\r\n            <svg class=\"icon\" >\r\n                <use xlink:href=\"#icon-close\"></use>\r\n            </svg>\r\n            </div>\r\n        </div>\r\n    </li>\r\n        `).insertBefore($lastLi)//将新元素插到lastLi前面\r\n        $li.on('click',()=>{ //点击$li代表的标签时，就打开一个新窗口。因为之前a标签太灵敏了,所以需要换种方法\r\n            window.open(node.url)\r\n        })\r\n        $li.on('click','.close',(e)=>{//当$li里的类为close的元素被点击时,执行\r\n            console.log('here')\r\n            e.stopPropagation()//通过阻止冒泡,避免点击×号时的点击事件传到上层的li，导致 跳转页面\r\n            hashMap.splice(index,1)//根据前面的索引index从数组中删除掉我点击的元素\r\n            render()//重新渲染\r\n        })\r\n    })\r\n    //在你关闭或刷新页面时触发\r\n    const string=JSON.stringify(hashMap)//将对象转换成字符串\r\n    localStorage.setItem('x',string)//在本地的存储里设置一个x ，值为string\r\n}\r\nrender()\r\n//监听点击事件\r\n$('.addButton')\r\n    .on('click',()=>{\r\n        let url=window.prompt('请输入你要的网址')//在网页端弹出一个方框让你输入,并返回你输入的内容\r\n        if(url.indexOf('http')!==0){//如果输入的内容里没http\r\n           url='https://'+url\r\n        }\r\n        console.log(url)\r\n        hashMap.push({\r\n            logo:simplifyUrl(url)[0],\r\n            logoType:'text',url:url\r\n        })\r\n        render()\r\n});\r\n\r\n\r\n$(document).on('keypress',(e)=>{\r\n    const {key}=e//获取到你按的是哪一个按键\r\n    for(let i=0;i<hashMap.length;i++){\r\n        if(hashMap[i].logo.toLowerCase()===key){ //若当前元素的logo值和我按的按键相同，那就打开其对应的网页\r\n            window.open(hashMap[i].url)\r\n        }\r\n    }\r\n})\r\n"]}